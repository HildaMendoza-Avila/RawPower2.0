install.packages("rgeos")
install.packages("ggmap")
install.packages("mapdata")
install.packages("maptools")
install.packages("ggthemes")
library(ggplot2)
library(rgeos)
library(ggmap)
library(maps)
library(mapdata)
library(maptools)
library(ggthemes)
library(sp)
library(stringr)
library(plyr)
library(lubridate)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/Week 12 Homework/CS 424 Week 12.R')
View(covidIL)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
gsub("Mc Henry", "Mchenry", covidIL$county)
covidIL$county <- gsub("Mc Henry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
subset(covidIL, county == "Mc Henry")
subset(covidIL, county == "Mc Henry")
View(covidIL)
subset(covidIL, county == "McHenry")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
covidIL$county <- gsub("DeKalb", "De Kalb", covidIL$county)
subset(covidIL, county == "De Kalb")
covidIL$county <- gsub("LaSalle", "La Salle", covidIL$county)
subset(covidIL, county == "La Salle")
covidIL$county <- gsub("McLean", "Mclean", covidIL$county)
subset(covidIL, county == "Mclean")
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McDonough", "Mcdonough", covidIL$county)
subset(covidIL, county == "Mcdonough")
covidIL$county <- gsub("St. Clair", "St Clair", covidIL$county)
subset(covidIL, county == "St Clair")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
library(shiny); runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/setDirectory.R')
shiny::runApp()
$fillPage
fillPage$
$fillPage
$sliderInput
sliderInput$
?sliderInput
?fillPage
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp()
energyData <- read_excel("egrid2018_data_v2.xlsx")
# replace all Na entries with 0
energyData[is.na(energyData)] = 0.00000000
View(energyData)
energyData <- read_excel("egrid2018_data_v2.xlsx")
View(energyData)
# replace all Na entries with 0
energyData[is.na(energyData)] = 0.00000000
# replace all negatives with 0
negativeSubset <- subset(energyData, select=9:length(energyData))
delete(negativeSubset)
rm(negativeSubset)
energyData <- read_excel("egrid2018_data_v2.xlsx")
# replace all Na entries with 0
energyData[is.na(energyData)] = 0.00000000
energyData < - subset(energyData, Latitude != 0)
energyData < - subset(energyData, Longitude != 0)
energyData < - subset(energyData, Latitude != 0)
energyData < - subset(energyData, Latitude > 0 || Latitude < 0)
?subset
energyData < - subset(energyData, select = -c(0.00000000))    #Latitude > 0 || Latitude < 0)
energyData <- read_excel("egrid2018_data_v2.xlsx")
# BEGINNING OF DATA CLEANING --------------------------------------
# replace all Na entries with 0
energyData[is.na(energyData)] = 0.00000000
# energyData < - subset(energyData, )    #Latitude > 0 || Latitude < 0)
# energyData < - subset(energyData, Longitude != 0)
View(energyData)
# replace all negatives found in columns (AnnualGenerationColumn to RenewableGenerationPercentage) with 0
negativeSubset <- subset(energyData, select=9:length(energyData))
negativeSubset[negativeSubset < 0] = 0.00000000
energyData[9:length(energyData)] <- negativeSubset
rm(negativeSubset)
# add total values of OTHER_FOSIL and OTHER_UNKNOWN
energyData$OTHER_TOTAL = energyData$OTHER_FOSSIL_TOTAL + energyData$OTHER_UNKNOWN_TOTAL
write_xlsx(energyData,"cleanedEnergyData.xlsx")
library("writexl")
write_xlsx(energyData,"cleanedEnergyData.xlsx")
rm(energyData)
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/DataCleaningScript.R')
rm(energyData)
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/DataCleaningScript.R')
energyData <- read_excel("cleanedEnergyData.xlsx")
View(energyData)
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/DataCleaningScript.R')
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/DataCleaningScript.R')
source('C:/Users/hilda/OneDrive/Desktop/Project 2 - Raw Power - Version 2.0/DataCleaningScript.R')
runApp()
energyData <- read_excel("cleanedEnergyData.xlsx")
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp()
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/Project02 - Files from GitHub/CS424-Project02-Script.R')
runApp()
runApp()
runApp()
runApp()
