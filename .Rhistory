install.packages("rgeos")
install.packages("ggmap")
install.packages("mapdata")
install.packages("maptools")
install.packages("ggthemes")
library(ggplot2)
library(rgeos)
library(ggmap)
library(maps)
library(mapdata)
library(maptools)
library(ggthemes)
library(sp)
library(stringr)
library(plyr)
library(lubridate)
source('C:/Users/hilda/OneDrive/Desktop/CS 424/Week 12 Homework/CS 424 Week 12.R')
View(covidIL)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
gsub("Mc Henry", "Mchenry", covidIL$county)
covidIL$county <- gsub("Mc Henry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
subset(covidIL, county == "Mc Henry")
subset(covidIL, county == "Mc Henry")
View(covidIL)
subset(covidIL, county == "McHenry")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McHenry", "Mchenry", covidIL$county)
subset(covidIL, county == "Mchenry")
covidIL$county <- gsub("DeKalb", "De Kalb", covidIL$county)
subset(covidIL, county == "De Kalb")
covidIL$county <- gsub("LaSalle", "La Salle", covidIL$county)
subset(covidIL, county == "La Salle")
covidIL$county <- gsub("McLean", "Mclean", covidIL$county)
subset(covidIL, county == "Mclean")
covidIL$county <- gsub("DuPage", "Du Page", covidIL$county)
subset(covidIL, county == "Du Page")
covidIL$county <- gsub("McDonough", "Mcdonough", covidIL$county)
subset(covidIL, county == "Mcdonough")
covidIL$county <- gsub("St. Clair", "St Clair", covidIL$county)
subset(covidIL, county == "St Clair")
#then take a look at the data for a given day on a map of Illinois counties. Note that today() can be a useful function to get today's date. Similarly today()-1 is yesterday. Note that the data in the file may be a day or two behind.
covidILOneDay <- subset(covidIL, newDate == "2021-03-15")
ilCountyCovid <- join(il, covidILOneDay)
ggplot() + geom_polygon(data = ilCountyCovid, aes(x = long, y = lat, group = group, fill = cases), color = "black") + coord_fixed(1.2) +
geom_text(data = centroids2, aes(x = clong, y = clat, label = county), color = "black", size = 2.25) + scale_fill_distiller(palette = "Blues") +
labs(fill = "cases") + theme_map()
library(shiny); runApp('C:/Users/hilda/OneDrive/Desktop/CS 424/CS424-Project03/DataExperimentationScript.R')
shiny::runApp('C:/Users/hilda/OneDrive/Desktop/RawPower2.0')
runApp('C:/Users/hilda/OneDrive/Desktop/RawPower2.0')
energyData <- read_excel("cleanedEnergyData.xlsx")
dataset <- energyData
setwd('..')
setwd('Desktop/RawPower2.0/')
energyData
energyData <- read_excel("cleanedEnergyData.xlsx")
dataset <- energyData
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sourceURLs <- list(COAL = "COAL.png", OIL = "OIL.png", GAS = "GAS.png", NUCLEAR = "NUCLEAR.png",
HYDRO = "HYDRO.png", BIOMASS = "BIOMASS.png", WIND = "WIND.png",
SOLAR = "SOLAR.png", GEOTHERMAL = "GEOTHERMAL.png", OTHER = "OTHER.png", NoEnergy = "No_Energy_Production.png")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addMarkers
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
View(df)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
# Make a list of icons. We'll index into it based on name.
oceanIcons <- iconList(
ship = makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18),
pirate = makeIcon("danger-24.png", "danger-24@2x.png", 24, 24)
)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
# Make a list of icons. We'll index into it based on name.
oceanIcons <- iconList(
ship = makeIcon("COAL.png", 18, 18),
pirate = makeIcon("NUCLEAR.png", 24, 24)
)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
View(oceanIcons)
View(df)
runApp()
runApp()
runApp()
runApp()
names(energyData)
names(energyData)
colnames(energyData)[which(names(energyData) == Non-RenewableGenerationPercentage)] <- NonRenewableGenerationPercentage
colnames(energyData)[which(names(energyData) == 'Non-RenewableGenerationPercentage')] <- NonRenewableGenerationPercentage
colnames(energyData)[30] <- NonRenewableGenerationPercentage
colnames(energyData)[which(names(energyData) == 'Non-RenewableGenerationPercentage')] <- "NonRenewableGenerationPercentage"
View(energyData)
names(energyData)
source('C:/Users/hilda/OneDrive/Desktop/RawPower2.0/DataCleaningScript.R')
runApp()
energyData <- read_excel("cleanedEnergyData.xlsx")
stateDataset <- NULL
runApp()
names(energyData)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
View(df)
nrow(energyData)
View(energyData)
?character
?seq_along
seq_along(energyData)
seq_along(nrow(energyData))
nrow(energyData)
1:nrow(energyData)
1:1
energyData[1]
energyData[1][]
energyData[][1]
energyData[[1]]
energyData[[]]
energyData[1,]
fifthRow <- energyData[5,]
View(fifthRow)
1:energyData[5,]
1:seq_along(energyData[5,])
seq_along(energyData[5,])
View(fifthRow)
selectedStateData[5, 10:18]
energyData[5, 10:18]
seq_along(energyData[5, 10:18])
10:18
10:18,32
(10:18,32)
(10:18-32)
(10:18)
(10:18), 32
32, 10:18
energyData[5,]
energyData[5,1]
energyData[[5,1]]
?factor
(ff <- factor(substring("statistics", 1:10, 1:10), levels = letters))
ff
?iconList
energyData$Year
runApp()
runApp()
View(energyData)
runApp()
?strcmp
??strcmp
runApp()
